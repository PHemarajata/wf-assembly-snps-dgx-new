/*
This file includes configuration for NVIDIA DGX Station A100 local execution.
System specs: 128 cores, 512 GB RAM
Leaving ~20% overhead for system processes and other tasks.
*/

params {
    // Maximum resources available (with overhead)
    max_cpus                = 100
    max_memory              = 400.GB
    max_time                = 240.h
    
    // Profile cache directory for containers
    profile_cache_dir       = "${HOME}/.nextflow/cache"
}

process {
    // Use local executor for single machine execution
    executor                = 'local'
    
    // Error handling for local execution
    errorStrategy           = { task.exitStatus in [130,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries              = 2
    
    // Default resource allocations
    cpus                    = { check_max( 2 * task.attempt, 'cpus' ) }
    memory                  = { check_max( 4.GB * task.attempt, 'memory' ) }
    time                    = { check_max( 4.h * task.attempt, 'time' ) }
    
    // Process-specific resource allocations
    withLabel: process_single {
        cpus                = { check_max( 1, 'cpus' ) }
        memory              = { check_max( 2.GB * task.attempt, 'memory' ) }
        time                = { check_max( 2.h * task.attempt, 'time' ) }
    }
    
    withLabel: process_low {
        cpus                = { check_max( 4 * task.attempt, 'cpus' ) }
        memory              = { check_max( 8.GB * task.attempt, 'memory' ) }
        time                = { check_max( 6.h * task.attempt, 'time' ) }
    }
    
    withLabel: process_medium {
        cpus                = { check_max( 16 * task.attempt, 'cpus' ) }
        memory              = { check_max( 32.GB * task.attempt, 'memory' ) }
        time                = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withLabel: process_high {
        cpus                = { check_max( 32 * task.attempt, 'cpus' ) }
        memory              = { check_max( 64.GB * task.attempt, 'memory' ) }
        time                = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    // Module-specific optimizations for computationally intensive processes
    withName: CORE_GENOME_ALIGNMENT_PARSNP {
        cpus                = { check_max( 48 * task.attempt, 'cpus' ) }
        memory              = { check_max( 128.GB * task.attempt, 'memory' ) }
        time                = { check_max( 48.h * task.attempt, 'time' ) }
    }
    
    withName: BUILD_PHYLOGENETIC_TREE_PARSNP {
        cpus                = { check_max( 32 * task.attempt, 'cpus' ) }
        memory              = { check_max( 64.GB * task.attempt, 'memory' ) }
        time                = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    withName: RECOMBINATION_GUBBINS {
        cpus                = { check_max( 24 * task.attempt, 'cpus' ) }
        memory              = { check_max( 48.GB * task.attempt, 'memory' ) }
        time                = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    withName: RECOMBINATION_CLONALFRAMEML {
        cpus                = { check_max( 16 * task.attempt, 'cpus' ) }
        memory              = { check_max( 32.GB * task.attempt, 'memory' ) }
        time                = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    withName: 'CALCULATE_PAIRWISE_DISTANCES_SNP_DISTS|CREATE_.*_SNP_DISTANCE_MATRIX_SNP_DISTS' {
        cpus                = { check_max( 16 * task.attempt, 'cpus' ) }
        memory              = { check_max( 32.GB * task.attempt, 'memory' ) }
        time                = { check_max( 12.h * task.attempt, 'time' ) }
    }
}

executor {
    // Limit concurrent jobs to prevent system overload
    queueSize               = 20
    pollInterval            = '5 sec'
}